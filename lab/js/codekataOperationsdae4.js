class codekataOperations{changeSplitSize(x,y){try{splitInstance.setSizes([x,y]);}
catch(error){console.log(error);}}
wecpLanguageName(language){var language_name={'c':'C','cpp':'CPP14','js':'JAVASCRIPT','pl':'PERL','php':'PHP','py':'PY2','py3':'PY3','cs':'CS','rb':'RUBY',"java":"JAVA","sh":"BASH","scala":"SCALA","go":"GO","m":"OBJC","java8":"JAVA8",'javascript':'JAVASCRIPT',"javascript_en":"JAVASCRIPT","python_en":"PY3","BASH":"BASH","C":"C","C++":"CPP14","C#":"CS","GO":"GO","JAVA":"JAVA","JAVA 8":"JAVA8","JAVASCRIPT":"JAVASCRIPT","OBJECTIVE C":"OBJC","PERL":"PERL","PHP":"PHP","PYTHON 2":"PY2","PYTHON 3":"PY3","RUBY":"RUBY","SCALA":"SCALA","java_en":"JAVA","java_telugu":"JAVA","python":"PY3","python_ar":"PY3","python_hi":"PY3","BASIC":3,"CLOJURE":18,"CRYSTAL":19,"ELIXIR":20,"ERLANG":21,"HASKELL":23,"INSECT":25,"OCAML":31,"OCTAVE":32,"PASCAL":33,"RUST":42};return language_name[language];}
renderComplierLanguages(){try{let editorModeId=$("#editorModeSelect");let availableLanguages=["BASH","BASIC","C","CLOJURE","CRYSTAL","C++","C#","ELIXIR","ERLANG","GO","HASKELL","INSECT","JAVA","JAVA 8","JAVASCRIPT","OCAML","OCTAVE","PASCAL","PYTHON 2","PYTHON 3","RUBY","RUST"];let languageData="";for(let itr=0;itr<availableLanguages.length;itr++){let languageValue=this.getValue(availableLanguages[itr]);let selectedLanguage=authorize.getSession("currentLanguage");if(selectedLanguage&&selectedLanguage===languageValue){languageData+="<option value='"+languageValue+"' selected>"+availableLanguages[itr]+"</option>"}
else{languageData+="<option value='"+languageValue+"'>"+availableLanguages[itr]+"</option>"}}
editorModeId.html(languageData);$("#ghLanguageSelect").html(languageData);$("#ghLanguageSelect").trigger("change");this.renderSourceCodeTemplate($("#editorModeSelect option:selected").html());}
catch(error){console.log(error);}}
getValue(label){let valueList={BASH:"bash",BASIC:"basic",C:"c",CLOJURE:"clojure",CRYSTAL:"crystal","C++":"cpp","C#":"csharp",ELIXIR:"elixir",GO:"go",HASKELL:"haskell",INSECT:"insect",JAVA:"java","JAVA 8":"java8",JAVASCRIPT:"javascript",OCAML:"ocaml",OCTAVE:"octave",PASCAL:"pascal","PYTHON 2":"python","PYTHON 3":"python3",RUBY:"ruby",RUST:"rust"};return valueList[label]?valueList[label]:"UNKNOWN";}
renderSourceCodeTemplate(languageName){try{let templateData={"BASH":'#A Simple Hello World Program\necho "Hello World"\n\n#Getting input via STDIN\nread userInput\necho "Input provided is: $userInput"',"C":'#include <stdio.h>\nint main(void) {\n    //A Simple Hello World\n    printf("hello, world\\n");\n    \n    //Getting input via STDIN\n    int userIntInput = 0;\n    char userStringInput[100] = "";\n    scanf("%d%s", &userIntInput, &userStringInput);\n    printf("The Integer and String Input provided is: %d, %s\\n", userIntInput, userStringInput);\n    return 0;\n}',"C++":'#include <iostream>\nusing namespace std;\nint main() {\n    //A Simple Hello World Program\n    cout << "Hello World" << endl;\n    \n    //Getting input via STDIN\n    int userIntInput = 0;\n    char userStringInput[100] = "";\n    cin >> userIntInput >> userStringInput;\n    cout << "The Integer and String Input is: " << userIntInput << ", " << userStringInput << endl;\n    return 0;\n}',"C#":'public class Hello {\n    public static void Main() {\n        //A Simple Hello World Program\n        System.Console.WriteLine("hello, world");\n        \n        //Getting input via STDIN\n        string userInput = System.Console.ReadLine();\n        System.Console.WriteLine("The Input Provided is: " + userInput);\n    }\n}',"GO":'package main\n\nimport "fmt"\n\nfunc main() {\n    //A Simple Hello World Program\n    fmt.Println("hello, world")\n    \n    //Getting input via STDIN\n    var userInput string\n    fmt.Scanln(&userInput)\n    fmt.Println("The Input Provided is: " + userInput)\n}',"JAVA":'import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        //A Simple Hello World\n        System.out.println("hello, world");\n        \n        //Getting input via STDIN\n        Scanner obj = new Scanner(System.in);\n        String userInput = obj.next();\n        System.out.println("The Input Provided is: " + userInput);\n    }\n}',"JAVA 8":'import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        //A Simple Hello World\n        System.out.println("hello, world");\n        \n        //Getting input via STDIN\n        Scanner obj = new Scanner(System.in);\n        String userInput = obj.next();\n        System.out.println("The Input Provided is: " + userInput);\n    }\n}',"JAVASCRIPT":'// Getting input via STDIN\nconst readline = require("readline");\n\nconst inp = readline.createInterface({\n  input: process.stdin\n});\n\nconst userInput = [];\n\ninp.on("line", (data) => {\n  userInput.push(data);\n});\n\ninp.on("close", () => {\n  //start-here\n  //Your code goes here â€¦ replace the below line with your code logic \n\n  console.log(userInput);\n\n  //end-here\n});',"OBJECTIVE C":'#import <Foundation/Foundation.h>\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        NSLog(@"Hello, World!");\n    }\n    return 0;\n}\n',"PERL":'#!/usr/bin/perl \n\n# Modules used \nuse strict; \nuse warnings; \n\n# Print function \nprint("Hello World"); \n',"PHP":'<?php\necho "Hello World!";\n?>',"PYTHON 2":'#A Simple Hello World\nprint "Hello World"\n\n#Getting input via STDIN\nuserInput = raw_input()\nprint "The Input Provided is: " + userInput',"PYTHON 3":'#A Simple Hello World\nprint("Hello World")\n\n#Getting input via STDIN\nuserInput = input()\nprint("The Input Provided is: " + userInput)',"RUBY":'#A Simple Hello World\nputs "hello, world"\n\n#Getting input via STDIN\nuserInput = gets\nputs "The Input Provided is: " + userInput',"SCALA":'object HelloWorld {\n  def main(args: Array[String]): Unit = {\n    println("Hello, world!")\n  }\n}',"BASIC":'\'A Simple Hello World Program\nPRINT "hello, world"\n\n\'Getting input via STDIN\nDim userInput As String\nINPUT userInput\nPRINT "Input Provided is "; userInput',"CLOJURE":';A Simple Hello World Program\n(println "hello, world")\n\n;Getting input via STDIN\n(def userInput (read-line))\n(println "The Input Provided is: "userInput)',"CRYSTAL":'#A Simple Hello World\nputs "hello, world"\n\n#Getting input via STDIN\nuserInput = gets\nputs "The Input Provided is: #{userInput}"',"ELIXIR":'#A Simple Hello World\nIO.puts "hello, world"\n\n#Getting input via STDIN\nuserInput = IO.read(:stdio, :line)\nIO.puts "The Input provided is: " <> userInput\n',"ERLANG":'main(_) ->\n    %% A Simple Hello World\n    io:fwrite("hello, world\\n").\n    \n    %% Getting input via STDIN. Uncomment the below code to use it.\n    %% {ok, [UserInput]} = io:fread("", "~s"),\n    %% io:fwrite("The Input Provided is: ~s", [UserInput]).',"HASKELL":'main = do\n    -- A Simple Hello World\n    putStrLn "Hello World"\n    \n    -- Getting input from STDIN\n    userInput <- getLine\n    putStrLn ("The Input provided is: " ++ userInput)  ',"INSECT":'2 min + 30 s',"OCAML":'(* A Simple Hello World *)\nprint_endline "hello, world";\n\n(* Getting input via STDIN *)\nlet n = read_line () in\nprint_string "The Input Provided is: ";\nprint_string n;',"OCTAVE":'%A Simple Hello World\nprintf("hello, world\\n");\n\n%Getting input via STDIN\nx = scanf(\'%s\', [1]);\nprintf("The Input Provided is: %s", x);',"PASCAL":"program Hello;\nvar userInput: string;\nbegin\n    // A Simple Hello World\n    writeln ('hello, world');\n    \n    //Getting Input Via STDIN\n    readln(userInput);\n    writeln('The Input Provide is: ', userInput)\nend.","RUST":'fn main() {\n    //A Simple Hello World\n    println!("hello, world");\n    \n    //Getting input via STDIN\n    let mut userInput = String::new();\n    std::io::stdin().read_line(&mut userInput).unwrap();\n    println!("The Input Provided is: {}", userInput);\n}'}
let codeAvailable=templateData[languageName]?templateData[languageName]:"";editor.setValue(codeAvailable);authorize.setSession("codekataInteracted","false");}
catch(error){console.log(error);}}
renderCustomCompilation(responseData){let data=responseData.compilationDetails;let runCount=responseData.runCount;let compilerData='<div id="offset">';compilerData+='<pre><b>>>></b> Compiling your code</pre>';let output=data.output?data.output:"Nil";let executionTime=data.executionTime?data.executionTime:"Nil";let memory=data.memory?data.memory:"Nil";compilerData+="<h5>Output: </h5>";compilerData+="<pre>"+output+"</pre><h5>Execution Time:</h5><pre><b>>>> </b>"+executionTime+"</pre><h5>Memory Used: </h5><pre><b>>>> </b>"+memory+"</pre>";compilerData+="</div>";$("#outputData").html(compilerData);$("#outputData").css({"height":"calc(100vh - 72vh)"});this.renderRuncount(responseData);console.log(data);}
renderRuncount(data){if(data.status=="success"&&data.runCount){$("#runCount").html(data.runCount);}
else{$("#runCount").html(0);}}
renderSlider(message,passedAllTestCase){try{let notice={content:message,showCountdown:true,delayOnHover:true,animation:"tada",offset:{y:50},responsiveWidth:true,audio:"audio/notification/plucky"};new jBox('Notice',notice);if(!passedAllTestCase){$(".jBox-Notice .jBox-content").css({"background-color":"#ff4136","color":"#ffffff"});}
else{$(".jBox-Notice .jBox-content").css({"background-color":"#09e176","color":"#ffffff"});}}
catch(error){console.log(error);}}
renderPointsModal(points){let modalId=$("#preassessmentCompletionModal");let modalMarkup='<div class="modal-dialog modal-dialog-centered modal-lg" role="document"><div class="modal-content"><div class="modal-header"><h5><strong> '+points+' </strong>Congratulations</h5></div><div class="modal-body"><p class="message"> <strong>Earned '+points+' Geekoins</strong> Use G Coins to redeems exciting rewards and gifts </p><br><div class="d-flex justify-content-center"><button id="startPreassess" class="btn btn-primary" data-dismiss="modal">Continue</button></div></div></div></div>';modalId.html(modalMarkup);modalId.modal({backdrop:"static",keyboard:false});this.updateLocalPoints(points);}
updateLocalPoints(points){let localPoints=authorize.getSession("userpoints");if(localPoints!=""){let updatedPoints=parseInt(localPoints)+points;localStorage.setItem("userpoints",updatedPoints)
$(".experience > span").html(updatedPoints);}}
renderSubmission(data){try{if(data.status!="success"){throw "Submission Failed";}
if(data.pointsDetails.addedPoints>0){this.renderPointsModal(data.pointsDetails.addedPoints);}
else{this.renderSlider(data.pointsDetails.submissionStatus,data.passedAllTestCase);}
this.renderCompiledData(data);}
catch(error){console.log(error);}}
updateSettings(){let currentMode=this.getMode($("#editorModeSelect").val());let fontSize=$("#editor-font-size").val();let selectedTheme=$("input[type=radio][name=theme]:checked").val();let wrapEnabled=$("#codeWrap").is(":checked");let showGutter=$("#showGutter").is(":checked");let autoCompletionEnabled=$("#autoCompletion").is(":checked");let lineNumberEnabled=$("#lineNumber").is(":checked");import("https://unpkg.com/ace-builds@1.4.8/src-min-noconflict/mode-"+currentMode+".js").then(function(currentLanguage){let selectedMode=ace.require("ace/mode/"+currentMode).Mode;editor.session.setMode(new selectedMode());editor.setOptions({fontSize:Number(fontSize),wrap:wrapEnabled,showGutter:showGutter,showLineNumbers:lineNumberEnabled,showPrintMargin:false,scrollPastEnd:true});});import("https://unpkg.com/ace-builds@1.4.8/src-min-noconflict/theme-"+selectedTheme+".js").then(function(currentTheme){editor.setTheme("ace/theme/"+selectedTheme);});import('https://unpkg.com/ace-builds@1.4.8/src-min-noconflict/ext-language_tools.js').then(function(autoCompletion){ace.require('ace/ext/language_tools');editor.setOption('enableLiveAutocompletion',autoCompletionEnabled);});}
insertTemplate(){let languageLabel=$("#editorModeSelect option:selected").text()
this.renderSourceCodeTemplate(languageLabel);$("#editorSettingModal, #switchTemplatePrompt").modal("hide");}
getMode(language){let modeList={bash:"sh",c:"c_cpp",clojure:"clojure",crystal:"crystal",cpp:"c_cpp",csharp:"csharp",elixir:"elixir",erlang:"erlang",go:"golang",haskell:"haskell",java:"java",java8:"java",javascript:"javascript",ocaml:"ocaml",pascal:"pascal",python:"python",python3:"python",ruby:"ruby",rust:"rust"};return modeList[language]?modeList[language]:"text";}
renderCompiledData(data){try{let compilerData="<pre><b>>>></b> Validating your code</pre>";for(let itr=0;itr<data.compiledData.length;itr++){let compilationStatus="";if(data.compiledData[itr].passed){compilationStatus="success";}
else{compilationStatus="error";}
let unlockBlock=("expected"in data.compiledData[itr])?'':'<a class="m-0 d-flex align-items-center font-weight-bold mr-5 cursor-pointer unlockNow" data-testcaseid="'+(itr+1)+'"><span class="material-icons">lock</span><span class="status-text">Unlock now</span></a>'
compilerData+='<div class="card"><div class="card-header d-flex justify-content-between px-3" id="heading'+(itr+1)+'"><div class="d-flex align-items-center"><i class="cursor-pointer fas '+(data.compiledData[itr].passed?"fa-check-circle":"fa-times-circle")+' fas-style question-'+compilationStatus+' pr-2 collapsed" data-toggle="collapse" data-target="#testcase'+(itr+1)+'" aria-expanded="false" aria-controls="testcase'+(itr+1)+'"></i><h6 class="mb-0 d-inline-block font-weight-bold cursor-pointer collapsed" data-toggle="collapse" data-target="#testcase'+(itr+1)+'" aria-expanded="false" aria-controls="testcase'+(itr+1)+'">Private Testcase #'+(itr+1)+'</h6></div><div class="d-flex">'+unlockBlock+'<div class="accordianIcon accordion-trigger p-0 collapsed" data-toggle="collapse" data-target="#testcase'+(itr+1)+'" aria-expanded="false" aria-controls="testcase'+(itr+1)+'"></div></div></div><div id="testcase'+(itr+1)+'" class="collapse" aria-labelledby="heading'+(itr+1)+'" data-parent="#accordion"><div class="card-body">';let executionTime=data.compiledData[itr].executionTime?data.compiledData[itr].executionTime:"Nil";let memory=data.compiledData[itr].memory?data.compiledData[itr].memory:"Nil";compilerData+="<h5>Testcase Status: </h5>";compilerData+="<pre><b>>>> </b>"+compilationStatus+"</pre>";if("expected"in data.compiledData[itr]){compilerData+="<h5>Input: </h5><pre>"+data.compiledData[itr].input+"</pre><h5>Expected Output: </h5><pre>"+data.compiledData[itr].expected+"</pre><h5>Actual Output: </h5><pre>"+data.compiledData[itr].output+"</pre>"}
compilerData+="<h5>Execution Time:</h5><pre><b>>>> </b>"+executionTime+"</pre><h5>Memory Used: </h5><pre><b>>>> </b>"+memory+"</pre>";compilerData+="</div></div></div>";}
$("#outputData").html('<div id="ckTestcaseAccordion" class="testcase-accordion">'+compilerData+'</div>');$("#outputData").css({"height":"calc(100vh - 72vh)"});$("#testcase1 > .card-body").css({"height":"calc(100vh - 60vh)"});$("#testcase2 > .card-body").css({"height":"calc(100vh - 60vh)"});}
catch(error){console.log(error);}}
renderUserSubmission(){let search=new URLSearchParams(document.location.search.substring(1));let conceptId=search.get("concept");let questionId=authorize.getSession(conceptId+"currentQid");let questionData=authorize.getSession(conceptId+questionId);let localCodeAvailable=authorize.getSession(conceptId+"SourceCode");let languageSelected=$("#editorModeSelect option:selected").html();$("#outputData").html("");questionData=JSON.parse(questionData);if(questionData&&questionData.questionData!==undefined){let questionDataInner=JSON.parse(questionData.questionData);questionData.completionStatus.completed=questionData.completionStatus.completed?questionData.completionStatus.completed:[];questionData.completionStatus.notCompleted=questionData.completionStatus.notCompleted?questionData.completionStatus.notCompleted:[];if(questionDataInner.alreadySubmitted||questionData.completionStatus.completed.includes(questionId.toString())||questionData.completionStatus.notCompleted.includes(questionId.toString())){if(questionDataInner.submission){editor.setValue(questionDataInner.submission.sourceCode);}
let currentLanguage=questionDataInner.submission?questionDataInner.submission.languageUsed:false;if(currentLanguage){$('#editorModeSelect option').filter(function(i,e){return $(e).text()==currentLanguage}).prop("selected",true)}
if(questionDataInner.passedAllTestCase||questionData.completionStatus.completed.includes(questionId.toString())){this.renderCompletionColor("success");}
else if(questionData.completionStatus.notCompleted.includes(questionId.toString())){this.renderCompletionColor("error");}}
else if(localCodeAvailable){editor.setValue(localCodeAvailable);}
else{this.renderSourceCodeTemplate(languageSelected);}}
else{this.renderCompletionColor("unfinished");}}
renderCompletionColor(status){try{let numberIdMarkup=$(".number-id");if(status=="success"){numberIdMarkup.removeClass("has-error");numberIdMarkup.addClass("has-success");}
else if(status=="error"){numberIdMarkup.removeClass("has-success");numberIdMarkup.addClass("has-error");}
else if(status=="unfinished"){numberIdMarkup.removeClass("has-success");numberIdMarkup.removeClass("has-error");}}
catch(error){console.log(error);}}
updateCurrentStatus(data,conceptId,questionId){try{let previousData=$("#allQuestionsModal").data("questionData");previousData=JSON.parse(previousData);let numberIdClass=$(".number-id");previousData.completionStatus.completed=previousData.completionStatus.completed?previousData.completionStatus.completed:[];previousData.completionStatus.notCompleted=previousData.completionStatus.notCompleted?previousData.completionStatus.notCompleted:[];if(previousData&&data.passedAllTestCase&&!previousData.completionStatus.completed.includes(questionId.toString())){previousData.completionStatus.completed.push(questionId.toString());this.renderCompletionColor("success");previousData=JSON.stringify(previousData);authorize.setSession(conceptId+questionId,previousData);$("#allQuestionsModal").data("questionData",previousData);}
else if(previousData&&!data.passedAllTestCase&&!previousData.completionStatus.completed.includes(questionId.toString())&&!previousData.completionStatus.notCompleted.includes(questionId.toString())){previousData.completionStatus.notCompleted.push(questionId.toString());this.renderCompletionColor("error");previousData=JSON.stringify(previousData);authorize.setSession(conceptId+questionId,previousData);$("#allQuestionsModal").data("questionData",previousData);}}
catch(error){console.log(error);}}}
$(document).ready(function(data){let codekataObj=new codekataOperations();authorize.loginCheck();$(".code-kata-inner-page .bodyContainer").css("padding-bottom",0);$("#inputData").css({"height":"calc(100vh - 72vh)"});let input={type:"getRunCount"};authorize.ajax(input,"wecp2.0",function(data){data=JSON.parse(data);codekataObj.renderRuncount(data)});});$(document).on("click","#runCode",function(data){let codekataObj=new codekataOperations();let languageSelected=$("#editorModeSelect option:selected").html();let user_input=$("#customInput").val();let wecpParam={type:"runCode",source:editor.getValue(),compilerId:codekataObj.wecpLanguageName(languageSelected),problemCode:"PoXO0UqtJSU6LWpU50R2rALMsUA9Tava",handleEscape:true};if(user_input!=""){wecpParam.user_input=user_input;}
$("#testcase-panel-tab")[0].click();let compilerData='<div id="offset">';compilerData+='<pre><b>>>></b> Compiling your code</pre>';$("#outputData").html(compilerData);$("#runCode").prop("disabled",true);authorize.ajax(wecpParam,'wecp2.0',function(data){$("#runCode").prop("disabled",false);data=JSON.parse(data);if(data.status=="success"&&data.compilationDetails){codekataObj.renderCustomCompilation(data);}
else if(data.status=="success"&&data.message){codekataObj.renderSlider('<a class="text-white no-underline" href="rewards.html"> Running out of compilation count?<br>Click here to get it<span class="material-icons align-middle pl-2">card_giftcard</span><span class="pl-2"><b>Rewards</b></span></a>',true);$(".rewardIcon").css({"color":"#ffdf0c"});}});});$(".video-notes-tab, #testcase-panel").hover(function(data){$("#customInput").focus();let codekataObj=new codekataOperations();codekataObj.changeSplitSize(50,50);},function(data){let codekataObj=new codekataOperations();codekataObj.changeSplitSize(50,50);});$("#codeEditorWrap").hover(function(data){editor.focus();let codekataObj=new codekataOperations();codekataObj.changeSplitSize(70,30);},function(data){let codekataObj=new codekataOperations();codekataObj.changeSplitSize(70,30);});$(document).on("change","#editorModeSelect",function(data){let codekataObj=new codekataOperations();let selectedLanguage=$("#editorModeSelect option:selected").html();authorize.setSession("currentLanguage",selectedLanguage);let search=new URLSearchParams(document.location.search.substring(1));let conceptId=search.get("concept");let codekataInteracted=authorize.getSession("codekataInteracted");if(codekataInteracted=="true"){$("#switchTemplatePrompt").modal({backdrop:"static",keyboard:false});}
else{codekataObj.renderSourceCodeTemplate(selectedLanguage);}});$(document).on("change","#ghLanguageSelect",function(data){let selectedLanguage=$("#ghLanguageSelect option:selected").html();authorize.setSession("currentGithubLanguage",selectedLanguage);});$(document).on("click","#submitCode",function(data){let codekataObj=new codekataOperations();let search=new URLSearchParams(document.location.search.substring(1));let conceptId=search.get("concept");if(conceptId){let questionKey=conceptId+"currentQid";let questionId=authorize.getSession(questionKey);let sourceCode=editor.getValue();let lineCount=sourceCode.split("\n").length;let languageSelected=$("#editorModeSelect option:selected").html();let wecpParam={type:"submitCode",source:sourceCode,compilerId:codekataObj.wecpLanguageName(languageSelected),languageUsed:languageSelected,conceptId:conceptId,lineCount:lineCount,problemCode:"PoXO0UqtJSU6LWpU50R2rALMsUA9Tava",questionId:questionId,handleEscape:true};$("#testcase-panel-tab")[0].click();let compilerData='<div id="offset">';compilerData+='<pre><b>>>></b> Validating your code</pre>';$("#outputData").html(compilerData);$("#submitCode").prop("disabled",true);authorize.ajax(wecpParam,"wecp2.0",function(data){$("#submitCode").prop("disabled",false);data=JSON.parse(data);codekataObj.renderSubmission(data);codekataObj.updateCurrentStatus(data,conceptId,questionId);});}
else{window.location.href="code-kata.html";}});$(document).on("click","#githubSubmit",function(data){let codekataObj=new codekataOperations();let search=new URLSearchParams(document.location.search.substring(1));let conceptId=search.get("concept");if(conceptId){let questionKey=conceptId+"currentQid";let questionId=authorize.getSession(questionKey);let sourceCode=$("#github .modal-body > pre").text();sourceCode=sourceCode.replace(/<br\s*\/?>/mg,"\n");let lineCount=sourceCode.split("\n").length;let languageSelected=$("#ghLanguageSelect option:selected").html();let githubUrl=$("#ghgithuburl").val();let wecpParam={type:"submitCodeGithub",source:sourceCode,compilerId:codekataObj.wecpLanguageName(languageSelected),languageUsed:languageSelected,conceptId:conceptId,lineCount:lineCount,problemCode:"PoXO0UqtJSU6LWpU50R2rALMsUA9Tava",questionId:questionId,githubUrl:githubUrl,handleEscape:true};$("#testcase-panel-tab")[0].click();let compilerData='<div id="offset">';compilerData+='<pre><b>>>></b> Validating your code</pre>';$("#outputData").html(compilerData);$("#githubSubmit").prop("disabled",true);authorize.ajax(wecpParam,"wecp2.0",function(data){$("#githubSubmit").prop("disabled",false);data=JSON.parse(data);codekataObj.renderSubmission(data);codekataObj.updateCurrentStatus(data,conceptId,questionId);});}
else{window.location.href="code-kata.html";}});$(document).on("click",".unlockNow",function(){let testCaseNumber=$(this).data("testcaseid");let search=new URLSearchParams(document.location.search.substring(1));let conceptId=search.get("concept");let questionKey=conceptId+"currentQid";let questionId=Number(authorize.getSession(questionKey));let codekataObj=new codekataOperations();$("#confirmUnlock").data("testCaseNumber",testCaseNumber);authorize.ajax({type:"getTestCaseValue",questionId:questionId},"wecp2.0",function(response){response=JSON.parse(response);if(response.status=="success"){$("#geekoinRequired").html('Spend <i class="icon-geekoin"></i><span class="font-weight-x-bold pl-1">'+response.pointsRequired+'</span> to unlock the testcase');$("#unlockTestCaseModal").modal({backdrop:"static",keyboard:false});}
else if(response.status=="error"){codekataObj.renderSlider(response.message.replace(/\n/g,"<br>"),false);}})});$(document).on("click","#confirmUnlock",function(){let currentEvent=$(this);currentEvent.prop("disabled",true);let testCaseNumber=$(this).data("testCaseNumber");let search=new URLSearchParams(document.location.search.substring(1));let conceptId=search.get("concept");let questionKey=conceptId+"currentQid";let questionId=Number(authorize.getSession(questionKey));let codekataObj=new codekataOperations();authorize.ajax({type:"unlockTestCase",questionId:questionId,testCaseNumber:testCaseNumber},"wecp2.0",function(response){response=JSON.parse(response);currentEvent.prop("disabled",false);$("#unlockTestCaseModal").modal("hide");if(response.status=="success"){codekataObj.renderCompiledData(response);if(!response.pointsDetails.deductedAlready){codekataObj.updateLocalPoints(0-response.pointsDetails.deductedPoints);}
$("#testcase"+testCaseNumber+"").collapse("show");}
else if(response.status=="error"){codekataObj.renderSlider(response.message.replace(/\n/g,"<br>"),false);}});});$(document).on("input","#editorModeSelect, #editor-font-size, #themeControl, #autoCompletion, #showGutter, #codeWrap, #lineNumber",function(){let codekataObj=new codekataOperations();codekataObj.updateSettings();});$(document).on("click","#insertTemplate, #dontKeepChanges",function(){let codekataObj=new codekataOperations();codekataObj.insertTemplate();});